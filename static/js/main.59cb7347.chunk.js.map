{"version":3,"sources":["utils/API.js","components/Search.js","components/Employee.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Search","props","className","onClick","all","female","male","Employee","useState","employees","setEmployees","filter","setFilter","useEffect","API","then","res","data","results","femaleEmp","employee","gender","console","log","maleEmp","map","key","id","name","first","last","src","picture","thumbnail","alt","email","phone","Navbar","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oSAEe,EACF,WACT,OAAOA,IAAMC,IAAI,iDCYNC,MAdf,SAAgBC,GACZ,OACI,6BACI,6BACI,6BACA,yCACA,4BAAQC,UAAU,uBAAuBC,QAAWF,EAAMG,KAA1D,OACA,4BAAQF,UAAU,uBAAuBC,QAAWF,EAAMI,QAA1D,UACA,4BAAQH,UAAU,kBAAkBC,QAAWF,EAAMK,MAArD,WC2DDC,MAhEf,WAAqB,IAAD,EACkBC,mBAAS,IAD3B,mBACTC,EADS,KACEC,EADF,OAEYF,mBAAS,IAFrB,mBAETG,EAFS,KAEDC,EAFC,KAiChB,OA7BAC,qBAAU,WAKNC,IACKC,MAAK,SAAUC,GACZJ,EAAUI,EAAIC,KAAKC,SACnBR,EAAaM,EAAIC,KAAKC,cAN/B,IA4BC,yBAAKhB,UAAU,aACX,kBAAC,EAAD,CAAQG,OAnBhB,WACI,IAAIc,EAAYR,EAAOA,QAAO,SAAAS,GAAQ,MAAwB,WAApBA,EAASC,UACnDX,EAAaS,GACbG,QAAQC,IAAId,IAgBqBH,KAbrC,WACI,IAAIkB,EAAUb,EAAOA,QAAO,SAAAS,GAAQ,MAAwB,SAApBA,EAASC,UACjDX,EAAac,GACbF,QAAQC,IAAId,IAUsCL,IAPtD,WAEIM,EADUC,MASF,2BAAOT,UAAU,mCACjB,+BACI,4BACI,oCACA,iCACA,sCACA,qCACA,uCAGJO,EAAUgB,KAAI,SAAAL,GAAQ,OACtB,+BACI,wBAAIM,IAAKN,EAASO,IAClB,4BAAKP,EAASQ,KAAKC,MAAnB,IAA2BT,EAASQ,KAAKE,MACzC,4BAAI,yBAAKC,IAAKX,EAASY,QAAQC,UAAWC,IAAKd,EAASQ,KAAKC,SAC7D,4BAAKT,EAASC,QACd,4BAAKD,EAASe,OACd,4BAAKf,EAASgB,e,MCjDvBC,MARf,WACI,OACI,yBAAKnC,UAAU,uBACZ,uBAAGA,UAAU,eAAeoC,KAAK,KAAjC,wBCOIC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.59cb7347.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  searchAll: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=20&nat=us\");\r\n  },\r\n  searchFemales: function() {\r\n    return axios.get(\"https://randomuser.me/api/?gender=female&results=20&nat=us\");\r\n  },\r\n  searchMales: function() {\r\n    return axios.get(\"https://randomuser.me/api/?gender=male&results=20&nat=us\");\r\n  }\r\n}\r\n    ","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <br></br>\r\n                <h4>Filter By</h4>\r\n                <button className=\"btn btn-primary mr-2\" onClick = {props.all}>All</button>\r\n                <button className=\"btn btn-primary mr-2\" onClick = {props.female}>Female</button>\r\n                <button className=\"btn btn-primary\" onClick = {props.male}>Male</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Search from \"./Search\";\r\n\r\nfunction Employee() {\r\n    const [employees, setEmployees] = useState([]);\r\n    const [filter, setFilter] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadEmployees() \r\n    }, []);\r\n\r\n    function loadEmployees() {\r\n        API.searchAll()\r\n            .then(function (res) {\r\n                setFilter(res.data.results);\r\n                setEmployees(res.data.results);\r\n            })\r\n    }\r\n\r\n    function showFemales() {\r\n        let femaleEmp = filter.filter(employee => employee.gender === \"female\");\r\n        setEmployees(femaleEmp);\r\n        console.log(employees);\r\n    }\r\n\r\n    function showMales() {\r\n        let maleEmp = filter.filter(employee => employee.gender === \"male\");\r\n        setEmployees(maleEmp);\r\n        console.log(employees);\r\n    }\r\n\r\n    function allEmp() {\r\n        let all = filter;\r\n        setEmployees(all);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Search female={showFemales} male={showMales} all = {allEmp}/>\r\n                \r\n                \r\n                <table className=\"table table-hover table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th> </th>\r\n                        <th>Gender</th>\r\n                        <th>Email</th>\r\n                        <th>Phone</th>\r\n                    </tr>\r\n                </thead>\r\n                   {employees.map(employee => \r\n                    <tbody>\r\n                        <tr key={employee.id}>\r\n                        <td>{employee.name.first} {employee.name.last}</td>\r\n                        <td><img src={employee.picture.thumbnail} alt={employee.name.first}/></td>\r\n                        <td>{employee.gender}</td>\r\n                        <td>{employee.email}</td>\r\n                        <td>{employee.phone}</td>\r\n                        </tr>\r\n                    </tbody>)}\r\n                </table>\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-light\">\r\n           <a className=\"navbar-brand\" href=\"/\">Employee Directory</a>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\nimport Employee from \"./components/Employee\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Employee />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}